in this folder a program is implemented based on avl tree .the main proprty of avl tree is height of left and right subtree should not differ more 
than 1.This difference is balance factor.
here the basic operations performed are:
insertion:insertion is done normally as in binary tree.after inserting check for the balance factor if the balance factor is violated.then tree is
balanced using some rotation techniques.
->perform left rotation when node is inserted into the right subtree of right subtree.
->perform right rotation when node is inserted into the left subtree of left subtree.
-->perform left-right rotation when a node is inserted into right subtree of left subtree.
->perform right-left rotation when a node is inserted into left subtree of right subtree.
always check the balance factor of tree after every operation.
Deletion:Deletion operation is same as in BST but here we need to check for balancing always.if the balancing condition is violated then perform
rotation in order to make the tree balanced.
Preorder:traversal should be of root->left->right
inorder:traversal should be like left->root->right
postorder:traversal should be like left->right->root

